#!/usr/bin/python3
# SPDX-License-Identifier: GPL-2.0-or-later
# SPDX-FileCopyrightText: 2005-2016 System76, Inc.

# Universal driver for System76 computers

import argparse
import os
import time
import logging
import distro

import system76driver
from system76driver.model import determine_model_new
from system76driver.products import PRODUCTS
from system76driver.gtk import UI


parser = argparse.ArgumentParser()
parser.add_argument('--home', help='specify home directory')
parser.add_argument('--model', help='force model rather than detecting it')
parser.add_argument('--dry', action='store_true', default=False,
    help='print what would be done but without calling Action.perform()',
)
args = parser.parse_args()

logging.basicConfig(
    level=logging.DEBUG,
    style='{',
    format='{asctime}  {levelname}  {message}',
)
log = logging.getLogger()

if args.home is None:
    args.home = os.environ['HOME']
if args.model is None:
    args.model = determine_model_new()
product = PRODUCTS.get(args.model)

log.info('** Process start at monotonic time %r', time.monotonic())
log.info('system76driver.__version__: %r', system76driver.__version__)
log.info('OS: %r', distro.name())
log.info('kernel: %r', os.uname().release)
log.info('model: %r', args.model)

ui = UI(args.model, product, args)
ui.run()

